apiVersion: v1
kind: Pod
metadata:
  name: prometheus
  labels:
    app: prometheus
spec:
  containers:
  - name: prometheus
    image: prom/prometheus
    ports:
    - containerPort: 9090
    volumeMounts:
    - name: prometheus-config-volume
      mountPath: /etc/prometheus/prometheus.yml
      subPath: prometheus.yml
  volumes:
  - name: prometheus-config-volume
    configMap:
      name: prometheus-config
---
# Serviço do Prometheus
apiVersion: v1
kind: Service
metadata:
  name: prometheus
spec:
  selector:
    app: prometheus
  ports:
    - protocol: TCP
      port: 9090
      targetPort: 9090
  type: ClusterIP

---

# Configuração do Prometheus
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s

    scrape_configs:
      - job_name: 'api-imagens'
        static_configs:
          - targets: ['api-imagens-service:8004']
        metrics_path: /metrics
      - job_name: 'prometheus'
        static_configs:
          - targets: ['prometheus:9090']

---

# Serviço da aplicação de imagens
apiVersion: v1
kind: Service
metadata:
  name: api-imagens-service
spec:
  selector:
    app: api-imagens
  ports:
    - protocol: TCP
      port: 8004
      targetPort: 8004
  type: ClusterIP

---
# Serviço do Redis
apiVersion: v1
kind: Service
metadata:
  name: redis-service
spec:
  selector:
    app: redis
  ports:
    - protocol: TCP
      port: 6379
      targetPort: 6379
  type: ClusterIP

---

# Deployment da aplicação de imagens
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-imagens-deployment
spec:
  replicas: 4
  selector:
    matchLabels:
      app: api-imagens
  template:
    metadata:
      labels:
        app: api-imagens
    spec:
      containers:
      - name: api-imagens-container
        image: luizfelipekraus/api-imagens-image
        ports:
        - containerPort: 8004
        livenessProbe:
          httpGet:
            path: /baixas/status
            port: 8004
          initialDelaySeconds: 15
          periodSeconds: 20
        env:
          - name: REDIS_HOST
            value: "redis-service"
          - name: REDIS_PORT
            value: "6379"

---

# Deployment do Redis
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis
        ports:
        - containerPort: 6379

---
apiVersion: v1
kind: Service
metadata:
  name: grafana
spec:
  selector:
    app: grafana
  ports:
    - protocol: TCP
      port: 3000
      targetPort: 3000
  type: NodePort

---
# Deployment do Grafana
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana
        ports:
        - containerPort: 3000
        volumeMounts:
        - name: grafana-storage
          mountPath: /var/lib/grafana
      volumes:
      - name: grafana-storage
        persistentVolumeClaim:
          claimName: grafana-pvc

---

# PersistentVolumeClaim para Grafana
#apiVersion: v1
#kind: PersistentVolumeClaim
#metadata:
#  name: grafana-pvc
#spec:
#  accessModes:
#    - ReadWriteOnce
#  resources:
#    requests:
#      storage: 1Gi
